// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package basic

import (
	json "encoding/json"

	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

var _ = json.RawMessage{} // suppress unused package warning

func easyjson_decode_github_com_corego_zeus_basic_UUID(in *jlexer.Lexer, out *UUID) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "GroupURL":
			out.GroupURL = string(in.String())
		case "MsgIDURL":
			out.MsgIDURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_corego_zeus_basic_UUID(out *jwriter.Writer, in *UUID) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"GroupURL\":")
	out.String(string(in.GroupURL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"MsgIDURL\":")
	out.String(string(in.MsgIDURL))
	out.RawByte('}')
}
func (v *UUID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_corego_zeus_basic_UUID(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *UUID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_corego_zeus_basic_UUID(w, v)
}
func (v *UUID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_corego_zeus_basic_UUID(&r, v)
	return r.Error()
}
func (v *UUID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_corego_zeus_basic_UUID(l, v)
}
func easyjson_decode_github_com_corego_zeus_basic_UUIDResult(in *jlexer.Lexer, out *UUIDResult) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "suc":
			out.Suc = bool(in.Bool())
		case "val":
			out.Val = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_corego_zeus_basic_UUIDResult(out *jwriter.Writer, in *UUIDResult) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"suc\":")
	out.Bool(bool(in.Suc))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"val\":")
	out.String(string(in.Val))
	out.RawByte('}')
}
func (v *UUIDResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_corego_zeus_basic_UUIDResult(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *UUIDResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_corego_zeus_basic_UUIDResult(w, v)
}
func (v *UUIDResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_corego_zeus_basic_UUIDResult(&r, v)
	return r.Error()
}
func (v *UUIDResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_corego_zeus_basic_UUIDResult(l, v)
}
