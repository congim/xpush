// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package basic

import (
	json "encoding/json"

	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson957004edDecodeGithubComCoregoZeusBasic(in *jlexer.Lexer, out *ReportMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mty":
			out.MsgType = int(in.Int())
		case "bt":
			out.BodyType = string(in.String())
		case "tm":
			out.Time = int64(in.Int64())
		case "ttp":
			if in.IsNull() {
				in.Skip()
				out.TTopics = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.TTopics = make([]string, 0, 4)
				} else {
					out.TTopics = []string{}
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.TTopics = append(out.TTopics, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tid":
			if in.IsNull() {
				in.Skip()
				out.TOpIDs = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.TOpIDs = make([]string, 0, 4)
				} else {
					out.TOpIDs = []string{}
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.TOpIDs = append(out.TOpIDs, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fid":
			out.FromOpID = string(in.String())
		case "ftp":
			out.FromTopic = string(in.String())
		case "mid":
			out.MsgID = string(in.String())
		case "onl":
			out.Online = int(in.Int())
		case "dev":
			out.Dev = int(in.Int())
		case "pty":
			out.PacketType = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson957004edEncodeGithubComCoregoZeusBasic(out *jwriter.Writer, in ReportMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mty\":")
	out.Int(int(in.MsgType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bt\":")
	out.String(string(in.BodyType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tm\":")
	out.Int64(int64(in.Time))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ttp\":")
	if in.TTopics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v3, v4 := range in.TTopics {
			if v3 > 0 {
				out.RawByte(',')
			}
			out.String(string(v4))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tid\":")
	if in.TOpIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in.TOpIDs {
			if v5 > 0 {
				out.RawByte(',')
			}
			out.String(string(v6))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fid\":")
	out.String(string(in.FromOpID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ftp\":")
	out.String(string(in.FromTopic))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mid\":")
	out.String(string(in.MsgID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"onl\":")
	out.Int(int(in.Online))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"dev\":")
	out.Int(int(in.Dev))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pty\":")
	out.Int(int(in.PacketType))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReportMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson957004edEncodeGithubComCoregoZeusBasic(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReportMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson957004edEncodeGithubComCoregoZeusBasic(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReportMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson957004edDecodeGithubComCoregoZeusBasic(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReportMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson957004edDecodeGithubComCoregoZeusBasic(l, v)
}
func easyjson957004edDecodeGithubComCoregoZeusBasic1(in *jlexer.Lexer, out *Statistics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "plf":
			out.Platform = string(in.String())
		case "rms":
			(out.Message).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson957004edEncodeGithubComCoregoZeusBasic1(out *jwriter.Writer, in Statistics) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"plf\":")
	out.String(string(in.Platform))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rms\":")
	(in.Message).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Statistics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson957004edEncodeGithubComCoregoZeusBasic1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Statistics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson957004edEncodeGithubComCoregoZeusBasic1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Statistics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson957004edDecodeGithubComCoregoZeusBasic1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Statistics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson957004edDecodeGithubComCoregoZeusBasic1(l, v)
}
