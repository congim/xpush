// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package basic

import (
	json "encoding/json"

	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

var _ = json.RawMessage{} // suppress unused package warning

func easyjson_decode_github_com_corego_zeus_basic_MessageLog(in *jlexer.Lexer, out *MessageLog) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "resource":
			out.Topic = string(in.String())
		case "token":
			out.Token = string(in.String())
		case "opId":
			out.UserName = string(in.String())
		case "userStatus":
			out.UserStatus = string(in.String())
		case "msgId":
			out.MsgID = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "content":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_corego_zeus_basic_MessageLog(out *jwriter.Writer, in *MessageLog) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"resource\":")
	out.String(string(in.Topic))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"token\":")
	out.String(string(in.Token))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"opId\":")
	out.String(string(in.UserName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"userStatus\":")
	out.String(string(in.UserStatus))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"msgId\":")
	out.String(string(in.MsgID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"category\":")
	out.String(string(in.Category))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"content\":")
	out.String(string(in.Message))
	out.RawByte('}')
}
func (v *MessageLog) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_corego_zeus_basic_MessageLog(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *MessageLog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_corego_zeus_basic_MessageLog(w, v)
}
func (v *MessageLog) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_corego_zeus_basic_MessageLog(&r, v)
	return r.Error()
}
func (v *MessageLog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_corego_zeus_basic_MessageLog(l, v)
}
func easyjson_decode_github_com_corego_zeus_basic_ClientPushAckLog(in *jlexer.Lexer, out *ClientPushAckLog) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic":
			out.Topic = string(in.String())
		case "msgType":
			out.MsgType = uint8(in.Uint8())
		case "originalMsgID":
			out.OriginalMsgID = string(in.String())
		case "newMsgID":
			out.NewMsgID = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_corego_zeus_basic_ClientPushAckLog(out *jwriter.Writer, in *ClientPushAckLog) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"topic\":")
	out.String(string(in.Topic))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"msgType\":")
	out.Uint8(uint8(in.MsgType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"originalMsgID\":")
	out.String(string(in.OriginalMsgID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"newMsgID\":")
	out.Uint16(uint16(in.NewMsgID))
	out.RawByte('}')
}
func (v *ClientPushAckLog) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_corego_zeus_basic_ClientPushAckLog(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *ClientPushAckLog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_corego_zeus_basic_ClientPushAckLog(w, v)
}
func (v *ClientPushAckLog) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_corego_zeus_basic_ClientPushAckLog(&r, v)
	return r.Error()
}
func (v *ClientPushAckLog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_corego_zeus_basic_ClientPushAckLog(l, v)
}
func easyjson_decode_github_com_corego_zeus_basic_ClientPushLog(in *jlexer.Lexer, out *ClientPushLog) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic":
			out.Topic = string(in.String())
		case "msgType":
			out.MsgType = uint8(in.Uint8())
		case "message":
			out.Message = string(in.String())
		case "msgID":
			out.MsgID = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_corego_zeus_basic_ClientPushLog(out *jwriter.Writer, in *ClientPushLog) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"topic\":")
	out.String(string(in.Topic))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"msgType\":")
	out.Uint8(uint8(in.MsgType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"message\":")
	out.String(string(in.Message))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"msgID\":")
	out.Uint16(uint16(in.MsgID))
	out.RawByte('}')
}
func (v *ClientPushLog) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_corego_zeus_basic_ClientPushLog(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *ClientPushLog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_corego_zeus_basic_ClientPushLog(w, v)
}
func (v *ClientPushLog) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_corego_zeus_basic_ClientPushLog(&r, v)
	return r.Error()
}
func (v *ClientPushLog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_corego_zeus_basic_ClientPushLog(l, v)
}
func easyjson_decode_github_com_corego_zeus_basic_RoomPushClientLog(in *jlexer.Lexer, out *RoomPushClientLog) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic":
			out.Topic = string(in.String())
		case "originalMsgID":
			out.OriginalMsgID = string(in.String())
		case "newMsgID":
			out.NewMsgID = uint16(in.Uint16())
		case "msgType":
			out.MsgType = uint8(in.Uint8())
		case "message":
			out.Message = string(in.String())
		case "label":
			out.Label = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_corego_zeus_basic_RoomPushClientLog(out *jwriter.Writer, in *RoomPushClientLog) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"topic\":")
	out.String(string(in.Topic))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"originalMsgID\":")
	out.String(string(in.OriginalMsgID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"newMsgID\":")
	out.Uint16(uint16(in.NewMsgID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"msgType\":")
	out.Uint8(uint8(in.MsgType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"message\":")
	out.String(string(in.Message))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"label\":")
	out.String(string(in.Label))
	out.RawByte('}')
}
func (v *RoomPushClientLog) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_corego_zeus_basic_RoomPushClientLog(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *RoomPushClientLog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_corego_zeus_basic_RoomPushClientLog(w, v)
}
func (v *RoomPushClientLog) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_corego_zeus_basic_RoomPushClientLog(&r, v)
	return r.Error()
}
func (v *RoomPushClientLog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_corego_zeus_basic_RoomPushClientLog(l, v)
}
func easyjson_decode_github_com_corego_zeus_basic_CachePushLog(in *jlexer.Lexer, out *CachePushLog) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic":
			out.Topic = string(in.String())
		case "msgID":
			out.MsgID = string(in.String())
		case "msgType":
			out.MsgType = uint8(in.Uint8())
		case "label":
			out.Label = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_corego_zeus_basic_CachePushLog(out *jwriter.Writer, in *CachePushLog) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"topic\":")
	out.String(string(in.Topic))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"msgID\":")
	out.String(string(in.MsgID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"msgType\":")
	out.Uint8(uint8(in.MsgType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"label\":")
	out.String(string(in.Label))
	out.RawByte('}')
}
func (v *CachePushLog) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_corego_zeus_basic_CachePushLog(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *CachePushLog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_corego_zeus_basic_CachePushLog(w, v)
}
func (v *CachePushLog) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_corego_zeus_basic_CachePushLog(&r, v)
	return r.Error()
}
func (v *CachePushLog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_corego_zeus_basic_CachePushLog(l, v)
}
func easyjson_decode_github_com_corego_zeus_basic_InsertLog(in *jlexer.Lexer, out *InsertLog) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic":
			out.Topic = string(in.String())
		case "msgID":
			out.MsgID = string(in.String())
		case "msgType":
			out.MsgType = uint8(in.Uint8())
		case "label":
			out.Label = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_corego_zeus_basic_InsertLog(out *jwriter.Writer, in *InsertLog) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"topic\":")
	out.String(string(in.Topic))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"msgID\":")
	out.String(string(in.MsgID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"msgType\":")
	out.Uint8(uint8(in.MsgType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"label\":")
	out.String(string(in.Label))
	out.RawByte('}')
}
func (v *InsertLog) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_corego_zeus_basic_InsertLog(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *InsertLog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_corego_zeus_basic_InsertLog(w, v)
}
func (v *InsertLog) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_corego_zeus_basic_InsertLog(&r, v)
	return r.Error()
}
func (v *InsertLog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_corego_zeus_basic_InsertLog(l, v)
}
func easyjson_decode_github_com_corego_zeus_basic_HTTPPushLog(in *jlexer.Lexer, out *HTTPPushLog) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topics":
			out.Topics = string(in.String())
		case "msgID":
			out.MsgID = string(in.String())
		case "iosmsg":
			out.Iosmsg = string(in.String())
		case "expire":
			out.Expire = string(in.String())
		case "msgType":
			out.MsgType = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "label":
			out.Label = string(in.String())
		case "from":
			out.From = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_corego_zeus_basic_HTTPPushLog(out *jwriter.Writer, in *HTTPPushLog) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"topics\":")
	out.String(string(in.Topics))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"msgID\":")
	out.String(string(in.MsgID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"iosmsg\":")
	out.String(string(in.Iosmsg))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"expire\":")
	out.String(string(in.Expire))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"msgType\":")
	out.String(string(in.MsgType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"message\":")
	out.String(string(in.Message))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"label\":")
	out.String(string(in.Label))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"from\":")
	out.String(string(in.From))
	out.RawByte('}')
}
func (v *HTTPPushLog) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_corego_zeus_basic_HTTPPushLog(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *HTTPPushLog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_corego_zeus_basic_HTTPPushLog(w, v)
}
func (v *HTTPPushLog) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_corego_zeus_basic_HTTPPushLog(&r, v)
	return r.Error()
}
func (v *HTTPPushLog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_corego_zeus_basic_HTTPPushLog(l, v)
}
